<!DOCTYPE html>
<html lang="vi">
<head>
    <title>SQLAdmin</title>
    <%- include('libs') -%>
    <%- include('error-message') -%>

    <link rel="stylesheet" href="/css/context-menu.css">
    <script src="/js/context-menu.js"></script>

    <style>
        .list-table {
            height: 100vh;
            overflow-y: scroll;
        }
        .table-expand {
            margin-left: 20px;
            border: none;
            width: calc(100% - 20px);
        }
        .table-expand tr {
            display: none;
            cursor: pointer;
        }
        .table-expand tr:hover {
            background-color: aquamarine;
        }
        .table-expand tr td {
            width: 100%;
            position: relative;
            height: 20px;
        }
        .table-expand tr.header {
            display: table-row;
            font-weight: bold;            
        }
        .table-expand tr td span {
            top: 0;
            position: absolute;
            left: 0;
            right: 0;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }        
        .table-expand tr.body td span {
            padding-left: 10px;           
        }

        .sql-content {
            width: 100%;
            height: calc(50vh);
        }
        .sql-content .text-sql {
            resize: none;
            width: 100%;
            height: 100%;
        }        
        .btn-format {
            margin-top: 25px;
        }
        .info-connect {
            resize: none;
        }
    </style>
</head>

<body>
    <div class="col-sm-2">
        <div class="list-table row">
            <% if (tableInfos) tableInfos.forEach(tableInfo => { %> 
                <table class="table-expand">
                    <tr class="header" title="<%= tableInfo.table.T_INFO_OBJECT %>">
                        <td>
                            <span><%= tableInfo.table.TABLE_NAME %></span>
                        </td></tr>
                    <%tableInfo.columns.forEach(column => { %>
                        <tr class="body">
                            <td data-placement="bottom" title="<%= column.T_INFO_OBJECT %>">
                            <span><%= column.COLUMN_NAME %></span>
                            </td>
                        </tr>    
                    <% }); %>
                </table>
            <% }); %>
            <form method="POST">
                <div class="form-group">
                    <textarea class="form-control info-connect" name="info-connect" rows="6"><%=connectionInfo%></textarea>
                    <center>
                        <button type="submit" class="btn btn-success btn-connect">Connect</button>
                    </center>
                </div>
            </form>
        </div>
    </div>
    
    <div class="col-sm-10">
        <div class="row form-row" style="margin-top: 15px;">
            <div class="form-group col-sm-12 btn-controls">
                <button class="btn btn-success btn-undo" title="Ctr + Z">Undo (Ctr + Z)</button>
                <button class="btn btn-success btn-redo" title="Ctr + Shift + Z">Redo (Ctr + Shift + Z)</button>
                <button class="btn btn-success btn-save" title="Ctr + S">Save (Ctr + S)</button>
                <!-- <button class="btn btn-success btn-load" title="Ctr + Shift + L">Load (Ctr + Shift + L)</button> -->
                <button class="btn btn-success btn-load-last" title="Ctr + L">Load Last (Ctr + L)</button>
            </div>
        </div>
        <div class="form-group sql-content">
            <textarea spellcheck="false" class="form-control text-sql" autofocus>
            </textarea>
        </div>      
        <div class="row form-row">
            <div class="form-group col-sm-4">
              <label for="sql-ip-start">Bắt đầu</label>
              <input type="text" class="form-control" id="sql-ip-start" placeholder="Bắt đầu">
            </div>
            <div class="form-group col-sm-4">
              <label for="sql-ip-end">Cuối</label>
              <input type="text" class="form-control" id="sql-ip-end" placeholder="Cuối">
            </div> 
            <div class="form-group col-sm-2">
              <label for="sql-ip-indent">Thụt lề</label>
              <input type="text" class="form-control" id="sql-ip-indent" value="4" placeholder="Thụt lề">
            </div>
            <div class="form-group col-sm-2">
                <button type="submit" class="btn btn-success btn-format">Format (Ctr + F)</button>
            </div>
        </div>
        <div class="row form-row">
            <div class='form-group col-sm-12 btn-supports'>
            </div>
        </div>
    </div>
</body>

<script>
    // Script support
    String.prototype.spliceInsertText = function(start, delCount, newSubStr) {
        return this.slice(0, start) + newSubStr + this.slice(start + Math.abs(delCount));
    };
    String.prototype.rightTrim = function(s) { 
        return this.replace(new RegExp(s + "*$"),''); 
    };

    $.fn.selectRange = function(start, end) {
        if(end === undefined) {
            end = start;
        }
        return this.each(function() {
            if('selectionStart' in this) {
                this.selectionStart = start;
                this.selectionEnd = end;
            } else if(this.setSelectionRange) {
                this.setSelectionRange(start, end);
            } else if(this.createTextRange) {
                var range = this.createTextRange();
                range.collapse(true);
                range.moveEnd('character', end);
                range.moveStart('character', start);
                range.select();
            }
        });
    };
</script>

<script>
    /////////////////////////////////// Define key ///////////////////////////////////
    var UNDO_SQL = [];
    var REDO_SQL = [];
    let SQL_KEY_SAVE = "TTOOL_SQL_KEY_SAVE";
    
    /////////////////////////////////// Define button support ///////////////////////////////////
    let btnSupports = [
        {
            cursor: "SELECT\n\nFROM\n".length,
            text: "SELECT",
            textSupport: "SELECT\n\nFROM\n\nWHERE ",
            shortKey: "F1",
        },
        {
            cursor: "SELECT * FROM\n".length,
            text: "SELECT * ",
            textSupport: "SELECT * FROM\n\nWHERE ",
            shortKey: "F2",
        },
        {
            cursor: "DELETE FROM ".length,
            text: "DELETE",
            textSupport: "DELETE FROM  WHERE ",
            shortKey: "F3",
        },
        {
            cursor: "UPDATE ".length,
            text: "UPDATE",
            textSupport: "UPDATE  SET  WHERE ",
            shortKey: "F4",
        }
    ]
</script>

<script>
    $('.text-sql').val('');
    $('.table-expand tr').contextmenu(function() {
        return false;
    });
    $('.table-expand tr.header').mousedown(function (event) {
        switch (event.which) {
        case 1:
            $(this).nextUntil('tr.header').css('display', function (i, v) {
                return (this.style.display === 'table-row') ? 'none' : 'table-row';
            });
            break;
        case 2:
            break;
        case 3:
            let value = $(this).find('span').html();
            replaceTextAreaSelected(value);
            return false;
        default:
            break;
        }
    });
    $('.table-expand tr.body').mousedown(function (event) {
        switch (event.which) {
        case 1:
            break;
        case 2:
            break;
        case 3:
            let value = $(this).find('span').html();
            if (event.ctrlKey) {
                value += "";
            }
            else if (event.shiftKey) {
                value += " = ";
            }
            else {
                value += ",\n";
            }
            replaceTextAreaSelected(value);
            return false
        default:
            break;
        }
    });

    // Key active undo - redu
    var doActive = false;

    function undo() {
        if (REDO_SQL.length == 0) {
            var selectionStart = $('.text-sql').prop("selectionStart");
            REDO_SQL.push({text: $('.text-sql').val(), cursor: selectionStart});
        }
        if (doActive === true) {
            if (UNDO_SQL.length > 0) {
                let sqlStatusDo = UNDO_SQL.pop();
                $('.text-sql').val(sqlStatusDo.text);
                setCursorIndex(sqlStatusDo.cursor, 10);
                REDO_SQL.push(sqlStatusDo);
            }
        }
        if (UNDO_SQL.length > 0) {
            doActive = false;
            let sqlStatusDo = UNDO_SQL.pop();
            $('.text-sql').val(sqlStatusDo.text);
            setCursorIndex(sqlStatusDo.cursor, 10);
            REDO_SQL.push(sqlStatusDo);
        }
    }

    function redo() {
        if (doActive === false) {
            if (REDO_SQL.length > 0) {
                let sqlStatusDo = REDO_SQL.pop();
                $('.text-sql').val(sqlStatusDo.text);
                setCursorIndex(sqlStatusDo.cursor, 10);
                UNDO_SQL.push(sqlStatusDo);
            }
        }
        if (REDO_SQL.length > 0) {
            doActive = true;
            let sqlStatusDo = REDO_SQL.pop();
            $('.text-sql').val(sqlStatusDo.text);
            setCursorIndex(sqlStatusDo.cursor, 10);
            UNDO_SQL.push(sqlStatusDo);
        }
    }

    function createUndo() {
        var textSql = $('.text-sql').val();
        var selectionStart = $('.text-sql').prop("selectionStart");
        UNDO_SQL.push({text: textSql, cursor: selectionStart});
        REDO_SQL = [];
    };

    function replaceTextAreaSelected(value) {
        var textSql = $('.text-sql').val();
        var selectionStart = $('.text-sql').prop("selectionStart");
        var selectionEnd = $('.text-sql').prop("selectionEnd");
        createUndo();
        var beforeSelect = textSql.slice(0, selectionStart);
        var afterSelect = textSql.slice(selectionEnd, textSql.length);
        var textSqlNew = beforeSelect + value + afterSelect;
        $('.text-sql').val(textSqlNew);
        setCursorIndex((beforeSelect + value).length, 10);
    }

    function replaceAllTextArea(value) {
        setSelectAllText();
        replaceTextAreaSelected(value);
    }
    
    function setCursorIndex(cursor, time) {
        setTimeout(function() {
            $('.text-sql').focus();
            $('.text-sql').selectRange(cursor);
        }, time);
    }

    function setSelectedText(from, to) {
        setTimeout(function() {
            $('.text-sql').focus();
            $('.text-sql').selectRange(from, to);
        }, 10);
    }

    function setSelectAllText() {
        $('.text-sql').focus();
        $('.text-sql').selectRange(0, $('.text-sql').val().length);
    }

    function tabMutilLine() {
        var selectionStart = $('.text-sql').prop("selectionStart");
        var selectionEnd = $('.text-sql').prop("selectionEnd");
        var textSql = $('.text-sql').val();

        var numberLine = textSql.slice(selectionStart, selectionEnd).split('\n').length;

        insertTextMutilLineInCursor('    ');
        setSelectedText(selectionStart + 4, selectionEnd + (numberLine * 4));
    }

    $('.text-sql').keydown(function (event) {
        var selectionStart = $('.text-sql').prop("selectionStart");
        var selectionEnd = $('.text-sql').prop("selectionEnd");

        // Shift tab
        if (event.which === 9 && !event.ctrlKey && event.shiftKey) {
            console.log('shift + tab')
            return false;
        }

        // Nút tab
        if (event.which === 9 && !event.ctrlKey && !event.shiftKey) {
            tabMutilLine();
            return false;
        }

        // Ctr + Shift + Z
        if (event.which === 90 && event.ctrlKey && event.shiftKey) {
            redo();
            return false;
        }

        // Ctr + Z
        if (event.which === 90 && event.ctrlKey && !event.shiftKey) {
            undo();
            return false;
        }
        
        // Ctr + Y
        if (event.which === 89 && event.ctrlKey) {
            return false;
        }

        // Ctr + S
        if (event.which === 83 && event.ctrlKey) {
            saveSql();
            return false;
        }

        // Ctr + L
        if (event.which === 76 && event.ctrlKey) {
            loadLastSql();
            return false;
        }

        // Ctr + F
        if (event.which === 70 && event.ctrlKey) {
            // Format sql
            formatSql();
            return false;
        }

        // Buton support
        let buttonSuport = getButtonFromShortKey(event.key);
        if (buttonSuport !== null) {
            processButtonSupport(buttonSuport);
            return false;
        }
    });

    $('.text-sql')
    .bind("dragover", false)
    .bind("dragenter", false)
    .bind("drop", function(e) {
        var textSelectedDrop = e.originalEvent.dataTransfer.getData("text") || e.originalEvent.dataTransfer.getData("text/plain");
        var splitTextSelected = textSelectedDrop.split("\n");

        if (splitTextSelected.length <= 0) {
            return false;
        }

        if (splitTextSelected.length === 1) {
            replaceTextAreaSelected(splitTextSelected[0]);
            return false;
        }
        
        let textJoin = "";
        for(let idx = 0; idx < splitTextSelected.length; idx++) {
            let text = splitTextSelected[idx];
            if (idx === splitTextSelected.length - 1) {
                textJoin += text;
                break;
            }
            text = text.trim();
            text += ',';
            text += '\n'
            textJoin += text; 
        }
        replaceTextAreaSelected(textJoin);            
        return false;
    });

    /////////////////////////////// Save Sql ////////////////////////////////
    function getAllSaveSql() {
        let value = localStorage.getItem(SQL_KEY_SAVE);
        if (value === null) {
            value = JSON.stringify([]);
            localStorage.setItem(SQL_KEY_SAVE, value);
        }

        let arraySave = JSON.parse(value);
        return arraySave;
    }

    function saveSql() {
        var textSql = $('.text-sql').val();
        let valueSaves = getAllSaveSql();
        valueSaves.push(textSql);
        let value = JSON.stringify(valueSaves);
        localStorage.setItem(SQL_KEY_SAVE, value);
    }

    function loadLastSql() {
        let valueSaves = getAllSaveSql();
        if (valueSaves.length > 0) {
            replaceAllTextArea(valueSaves[valueSaves.length - 1]);
        }
    }

    $('.btn-save').on('click', function (event) {
        saveSql();
        return false;
    });

    $('.btn-load-last').on('click', function (event) {
        loadLastSql();
        return false;
    });

    /////////////////////////////// Save Sql ////////////////////////////////
    $('.btn-undo').on('click', function (event) {
        undo();
        return false;
    });

    $('.btn-redo').on('click', function (event) {
        redo();
        return false;
    });

    //////////////////////////////// Format Sql ////////////////////////////////
    $('.btn-format').click(function(event) {
        formatSql();
    });

    function formatSql() {
        let startSql = $('#sql-ip-start').val();
        let endSql = $('#sql-ip-end').val();
        let indentSql = $('#sql-ip-indent').val();
        let contentSql = $('.text-sql').val();
        let dataPost = {
            start: startSql,
            end: endSql,
            indent: indentSql,
            content: contentSql
        }

        $.ajax({
            url: "/api/sql/format",
            type: "post",
            data: dataPost ,
            success: function (res) {
                if (res.code !== 0) {
                    alert(res.content);
                    return;
                }

                replaceAllTextArea(res.content);
            },
            error: function(err) {
                alert(err.statusText + ": " + err.status);
            }
        });
    }

    //////////////////////////////// Button support ////////////////////////////////
    createButtonSupport();
    function createButtonSupport() {
        for(let idx = 0; idx < btnSupports.length; idx++) {
            let button = btnSupports[idx];
            let buttonSupport = '<button class="btn btn-success" data-id=' + idx + ' >' + button.shortKey+ ': ' + button.text + '</button>'
            $(".btn-supports").append(buttonSupport);
        }
    }

    function processButtonSupport(button) {
        // Lưu vị trí con trỏ trước đó
        var selectionStart = $('.text-sql').prop("selectionStart");
        let textSql = $('.text-sql').val();
        var beforeSelect = textSql.slice(0, selectionStart);
        replaceTextAreaSelected(button.textSupport);

        // Chuyển con trỏ
        setCursorIndex(beforeSelect.length + button.cursor, 10);
    }

    function getButtonFromShortKey(key) {
        let buttonGet = null;
        btnSupports.forEach(button => {
            if (button.shortKey == key) {
                buttonGet = button;
                return;
            }
        });
        return buttonGet;
    }

    $('.btn-supports').on('click', 'button', function(event) {
        // Set code hổ trợ vào theo button
        let button = btnSupports[$(this).attr('data-id')];
        processButtonSupport(button);
    });

    function insertTextMutilLineInCursor(textContent) {
        var textSql = $('.text-sql').val();
        var selectionStart = $('.text-sql').prop("selectionStart");
        var selectionEnd = $('.text-sql').prop("selectionEnd");
        // var textSqlSelectedSplits = textSql.slice(selectionStart, selectionEnd).split('\n');

        let indexFirstLineSelected = -1;
        for (let idx = selectionStart - 1; idx >= 0; idx--) {
            if (idx === 0) {
                indexFirstLineSelected = 0;
                break;
            }
            if (textSql[idx] == '\n') {
                indexFirstLineSelected = idx + 1;
                break;
            }
        }

        let indexLastLineSelected = -1;
        for (let idx = selectionEnd; idx < textSql.length; idx++) {
            if (textSql[idx] == '\n') {
                indexLastLineSelected = idx;
                break;
            }
            if (idx == textSql.length - 1) {
                indexLastLineSelected = idx;
                break;
            }
        }

        let cursorSkipInsertText = selectionStart - indexFirstLineSelected;
        var textSqlSelectedLineSplits = textSql.slice(indexFirstLineSelected, indexLastLineSelected).split('\n');
        for (let idx = 0; idx < textSqlSelectedLineSplits.length; idx++) {
            textSqlSelectedLineSplits[idx] = textSqlSelectedLineSplits[idx].rightTrim().spliceInsertText(cursorSkipInsertText, 0, textContent);
        }

        var contentSqlNew = textSqlSelectedLineSplits.join("\n");
        var textSqlNew = textSql.slice(0, indexFirstLineSelected) + contentSqlNew + textSql.slice(indexLastLineSelected, textSql.length);
        replaceAllTextArea(textSqlNew);
    }

    let menus = [
        {
            key: "insert_mutil_line",
            text: "Thêm ký tự đầu corsor nhiều dòng như dùng phím alt quét đứng"
        },
        {
            key: "acronym_column",
            text: "Thêm ký tự viết tắt cho columns"
        }
    ];
    setContextMenu($('.text-sql'), menus, function(item) {
        switch (item) {
            case "insert_mutil_line":
                var acronym_column = prompt("Nhập ký tự thêm đầu corsor:");
                if (acronym_column == null) {
                    return;
                }
                insertTextMutilLineInCursor(acronym_column);
            break;
            case "acronym_column":
                var acronym_column = prompt("Nhập ký tự viết tắt cho columns:");
                if (acronym_column == null) {
                    return;
                }
                insertTextMutilLineInCursor(acronym_column + ".");
            break;
        }
    });
</script>
</html>